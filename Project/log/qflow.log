Starting new log file Wed Apr 16 02:32:55 2025

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project atm_fsm
Running yosys for verilog parsing and synthesis
yosys  -s atm_fsm.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `atm_fsm.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/robot/Desktop/ASIC/Project/source/atm_controller.v
Parsing Verilog input from `/home/robot/Desktop/ASIC/Project/source/atm_controller.v' to AST representation.
Generating RTLIL representation for module `\atm_fsm'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \atm_fsm

3.1.2. Analyzing design hierarchy..
Top module:  \atm_fsm
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1 in module atm_fsm.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\atm_fsm.$proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\atm_fsm.$proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1'.
1/5: $0\freeze_timer[31:0]
2/5: $0\wrong_pin_counter[1:0]
3/5: $0\freeze[0:0]
4/5: $0\auth_success[0:0]
5/5: $0\state[2:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\atm_fsm.\state' using process `\atm_fsm.$proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1'.
created $adff cell `$procdff$120' with positive edge clock and positive level reset.
Creating register for signal `\atm_fsm.\auth_success' using process `\atm_fsm.$proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1'.
created $adff cell `$procdff$121' with positive edge clock and positive level reset.
Creating register for signal `\atm_fsm.\freeze' using process `\atm_fsm.$proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1'.
created $adff cell `$procdff$122' with positive edge clock and positive level reset.
Creating register for signal `\atm_fsm.\wrong_pin_counter' using process `\atm_fsm.$proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1'.
created $adff cell `$procdff$123' with positive edge clock and positive level reset.
Creating register for signal `\atm_fsm.\freeze_timer' using process `\atm_fsm.$proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1'.
created $adff cell `$procdff$124' with positive edge clock and positive level reset.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 16 empty switches in `\atm_fsm.$proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1'.
Removing empty process `atm_fsm.$proc$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:29$1'.
Cleaned up 16 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.
<suppressed ~2 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module atm_fsm..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \atm_fsm..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Replacing known input bits on port B of cell $procmux$57: \freeze -> 1'1
Replacing known input bits on port A of cell $procmux$53: \freeze -> 1'0
Replacing known input bits on port B of cell $procmux$51: \freeze -> 1'0
Replacing known input bits on port A of cell $procmux$48: \freeze -> 1'0
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \atm_fsm.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \atm_fsm..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \atm_fsm.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell atm_fsm.$add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:40$3 ($add).
Removed top 15 bits (of 32) from port B of cell atm_fsm.$lt$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:39$2 ($lt).
Removed top 31 bits (of 32) from port B of cell atm_fsm.$add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:60$4 ($add).
Removed top 30 bits (of 32) from port Y of cell atm_fsm.$add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:60$4 ($add).
Removed top 1 bits (of 3) from port B of cell atm_fsm.$procmux$95_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell atm_fsm.$procmux$107_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell atm_fsm.$procmux$113_CMP0 ($eq).
Removed top 30 bits (of 32) from wire atm_fsm.$add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:60$4_Y.

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~132 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module atm_fsm:
creating $macc model for $add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:40$3 ($add).
creating $macc model for $add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:60$4 ($add).
creating $alu model for $macc $add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:60$4.
creating $alu model for $macc $add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:40$3.
creating $alu model for $lt$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:39$2 ($lt): new $alu
creating $alu cell for $lt$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:39$2: $auto$alumacc.cc:474:replace_alu$127
creating $alu cell for $add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:40$3: $auto$alumacc.cc:474:replace_alu$138
creating $alu cell for $add$/home/robot/Desktop/ASIC/Project/source/atm_controller.v:60$4: $auto$alumacc.cc:474:replace_alu$141
created 3 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.
<suppressed ~3 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \atm_fsm..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \atm_fsm.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$130: { $auto$alumacc.cc:490:replace_alu$128 [0] $auto$alumacc.cc:490:replace_alu$128 [1] $auto$alumacc.cc:490:replace_alu$128 [2] $auto$alumacc.cc:490:replace_alu$128 [3] $auto$alumacc.cc:490:replace_alu$128 [4] $auto$alumacc.cc:490:replace_alu$128 [5] $auto$alumacc.cc:490:replace_alu$128 [6] $auto$alumacc.cc:490:replace_alu$128 [7] $auto$alumacc.cc:490:replace_alu$128 [8] $auto$alumacc.cc:490:replace_alu$128 [9] $auto$alumacc.cc:490:replace_alu$128 [10] $auto$alumacc.cc:490:replace_alu$128 [11] $auto$alumacc.cc:490:replace_alu$128 [12] $auto$alumacc.cc:490:replace_alu$128 [13] $auto$alumacc.cc:490:replace_alu$128 [14] $auto$alumacc.cc:490:replace_alu$128 [15] $auto$alumacc.cc:490:replace_alu$128 [16] $auto$alumacc.cc:490:replace_alu$128 [17] $auto$alumacc.cc:490:replace_alu$128 [18] $auto$alumacc.cc:490:replace_alu$128 [19] $auto$alumacc.cc:490:replace_alu$128 [20] $auto$alumacc.cc:490:replace_alu$128 [21] $auto$alumacc.cc:490:replace_alu$128 [22] $auto$alumacc.cc:490:replace_alu$128 [23] $auto$alumacc.cc:490:replace_alu$128 [24] $auto$alumacc.cc:490:replace_alu$128 [25] $auto$alumacc.cc:490:replace_alu$128 [26] $auto$alumacc.cc:490:replace_alu$128 [27] $auto$alumacc.cc:490:replace_alu$128 [28] $auto$alumacc.cc:490:replace_alu$128 [29] $auto$alumacc.cc:490:replace_alu$128 [30] $auto$alumacc.cc:490:replace_alu$128 [31] }
Optimizing cells in module \atm_fsm.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \atm_fsm..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \atm_fsm.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking atm_fsm.state as FSM state register:
Register is connected to module port.
Users of register don't seem to benefit from recoding.

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.
<suppressed ~4 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \atm_fsm..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \atm_fsm.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=17\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
No more expansions possible.
<suppressed ~713 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.
<suppressed ~421 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
<suppressed ~210 debug messages>
Removed a total of 70 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..
Removed 76 unused cells and 311 unused wires.
<suppressed ~77 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\atm_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 456 gates and 505 wires to a netlist network with 47 inputs and 39 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        6
ABC RESULTS:            ANDNOT cells:       79
ABC RESULTS:              AOI3 cells:       41
ABC RESULTS:              AOI4 cells:        5
ABC RESULTS:               MUX cells:       74
ABC RESULTS:              NAND cells:       21
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:       44
ABC RESULTS:              OAI3 cells:        8
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:       50
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       30
ABC RESULTS:        internal signals:      419
ABC RESULTS:           input signals:       47
ABC RESULTS:          output signals:       39
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.
<suppressed ~35 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..
Removed 1 unused cells and 196 unused wires.
<suppressed ~2 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \atm_fsm

3.25.2. Analyzing design hierarchy..
Top module:  \atm_fsm
Removed 0 unused modules.

3.26. Printing statistics.

=== atm_fsm ===

Number of wires:                360
Number of wire bits:            443
Number of public wires:          16
Number of public wire bits:      65
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                417
$_ANDNOT_                      79
$_AND_                          6
$_AOI3_                        41
$_AOI4_                         5
$_DFF_PP0_                     39
$_MUX_                         74
$_NAND_                        21
$_NOR_                          8
$_NOT_                         43
$_OAI3_                         8
$_OAI4_                         2
$_ORNOT_                       10
$_OR_                          50
$_XNOR_                         1
$_XOR_                         30

3.27. Executing CHECK pass (checking for obvious problems).
checking module atm_fsm..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\atm_fsm':
mapped 39 $_DFF_PP0_ cells to \DFFSR cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
<suppressed ~114 debug messages>
Removed a total of 38 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \atm_fsm..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \atm_fsm.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..
Removed 0 unused cells and 38 unused wires.
<suppressed ~1 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\atm_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 379 gates and 427 wires to a netlist network with 48 inputs and 40 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.38 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:        6
ABC RESULTS:           AOI22X1 cells:        3
ABC RESULTS:             INVX1 cells:       34
ABC RESULTS:           NAND2X1 cells:       28
ABC RESULTS:           NAND3X1 cells:       25
ABC RESULTS:            NOR2X1 cells:       43
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:       59
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:      339
ABC RESULTS:           input signals:       48
ABC RESULTS:          output signals:       40
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 427 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port atm_fsm.amount_entered: Missing option -inpad.
Mapping port atm_fsm.auth_success using BUFX2.
Don't map input port atm_fsm.balance_check: Missing option -inpad.
Don't map input port atm_fsm.cash_eject: Missing option -inpad.
Don't map input port atm_fsm.clk: Missing option -inpad.
Don't map input port atm_fsm.correct_pin: Missing option -inpad.
Don't map input port atm_fsm.exit: Missing option -inpad.
Mapping port atm_fsm.freeze using BUFX2.
Don't map input port atm_fsm.insert_card: Missing option -inpad.
Don't map input port atm_fsm.pin_input: Missing option -inpad.
Don't map input port atm_fsm.print_balance: Missing option -inpad.
Don't map input port atm_fsm.reset: Missing option -inpad.
Mapping port atm_fsm.state using BUFX2.
Don't map input port atm_fsm.withdraw: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \atm_fsm..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \atm_fsm.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\atm_fsm'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \atm_fsm..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module atm_fsm.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== atm_fsm ===

Number of wires:                199
Number of wire bits:            284
Number of public wires:         199
Number of public wire bits:     284
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                258
AND2X2                          4
AOI21X1                         6
AOI22X1                         3
BUFX2                           5
DFFSR                          39
INVX1                          34
NAND2X1                        28
NAND3X1                        25
NOR2X1                         43
NOR3X1                          3
OAI21X1                        59
OAI22X1                         2
OR2X2                           3
XNOR2X1                         3
XOR2X1                          1

End of script. Logfile hash: 5b6f356608
CPU: user 2.04s system 0.58s, MEM: 20.61 MB total, 14.96 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 20% 18x opt_merge (0 sec), 17% 2x techmap (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl atm_fsm_mapped.blif atm_fsm /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd
Yosys syntax postprocessing
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I atm_fsm_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif atm_fsm.blif
gates resized: 40
gates resized: 20
gates resized: 0
Generating RTL verilog and SPICE netlist file in directory
/home/robot/Desktop/ASIC/Project/synthesis
Files:
Verilog: /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.rtl.v
Verilog: /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.rtlnopwr.v
Verilog: /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.rtlbb.v
Spice:   /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.spc
Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" atm_fsm.spc atm_fsm.xspice

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project atm_fsm
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
LEF Read: encountered 0 errors and 12 warnings total.
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Running blif2cel to generate input files for graywolf
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
blif2cel.tcl --blif /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/robot/Desktop/ASIC/Project/layout/atm_fsm.cel
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
No atm_fsm.cel1 file found for project. . . no partial blockages to apply to layout.
No atm_fsm.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  atm_fsm
Running getfillcell to determine cell to use for fill.
getfillcell.tcl atm_fsm  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl atm_fsm FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 5.0 150.0 PG atm_fsm  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  atm_fsm
Reading info file atm_fsm.info. . .
Reading DEF file atm_fsm.def. . .
Warning: pin pin_input[0] has no bounding box.
Warning: pin pin_input[5] has no bounding box.
Warning: pin pin_input[11] has no bounding box.
Warning: pin pin_input[15] has no bounding box.
Warning: pin pin_input[12] has no bounding box.
Warning: pin pin_input[8] has no bounding box.
Warning: pin pin_input[1] has no bounding box.
Warning: pin pin_input[3] has no bounding box.
Warning: pin pin_input[9] has no bounding box.
Warning: pin pin_input[2] has no bounding box.
Warning: pin pin_input[10] has no bounding box.
Warning: pin pin_input[7] has no bounding box.
Warning: pin pin_input[6] has no bounding box.
Warning: pin pin_input[13] has no bounding box.
Warning: pin pin_input[14] has no bounding box.
Warning: pin pin_input[4] has no bounding box.
Recalculating pin positions
Writing DEF file atm_fsm_mod.def. . .
Done with arrangepins.tcl
blifanno.tcl /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.blif atm_fsm.def /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm_anno.blif
Generating RTL verilog and SPICE netlist file in directory
/home/robot/Desktop/ASIC/Project/synthesis
Files:
Verilog: /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.rtl.v
Verilog: /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.rtlnopwr.v
Verilog: /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.rtlbb.v
Spice:   /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.spc
Copying atm_fsm.rtl.v, atm_fsm.rtlnopwr.v, and atm_fsm.rtlbb.v to backups
Running blif2Verilog.
Running blif2BSpice.

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project atm_fsm
Errors in synthesis flow, qflow status = -15

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project atm_fsm
Running qrouter 1.4.59.T
qrouter -noc  -s atm_fsm.cfg
*** Running stage1 routing with defaults
Nets remaining: 300
Nets remaining: 200
Nets remaining: 100
Nets remaining: 90
Nets remaining: 80
Nets remaining: 70
Nets remaining: 60
Nets remaining: 50
Nets remaining: 40
Nets remaining: 30
Nets remaining: 20
Progress: Stage 1 total routes completed: 689
Failed net routes: 2
*** Running stage2 routing with options mask 10, effort 10
Nets remaining: 2
Nets remaining: 2
Nets remaining: 2
Nets remaining: 1
Progress: Stage 2 total routes completed: 698
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 300
Nets remaining: 200
Nets remaining: 100
Nets remaining: 70
Nets remaining: 50
Nets remaining: 30
Progress: Stage 3 total routes completed: 1299
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 300
Nets remaining: 200
Nets remaining: 100
Nets remaining: 70
Nets remaining: 50
Nets remaining: 30
Progress: Stage 3 total routes completed: 1898
No failed routes!
*** Writing DEF file atm_fsm_route.def
Final: No failed routes!
*** Writing RC file atm_fsm_route.rc
Running annotate.tcl antenna.out /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.rtlnopwr.v
/home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.spc /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.rtlnopwr.anno.v
/home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.anno.spc  /usr/local/share/qflow/tech/osu035/osu035_stdcells.sp /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm_powerground
Running annotate.tcl
found cell FILL pinlist vdd gnd
Done with annotate.tcl

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project atm_fsm
Converting qrouter output to vesta delay format
Running rc2dly -r atm_fsm.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d atm_fsm.dly

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project atm_fsm
Running magic 8.2.157
magic -dnull -noconsole  migrate_atm_fsm.tcl

Magic 8.2 revision 157 - Compiled on Thu, 07 Nov 2019 21:14:45 +0100.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "migrate_atm_fsm.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read, Line 207 (Message): Defines site corner (ignored)
LEF read, Line 213 (Message): Defines site IO (ignored)
LEF read, Line 219 (Message): Defines site core (ignored)
Moving label "CLK" from metal1 to m2contact in cell DFFNEGX1.
Moving label "CLK" from metal1 to m2contact in cell DFFNEGX1.
Moving label "A" from metal1 to m2contact in cell XNOR2X1.
LEF read: Processed 3179 lines.
Reading DEF data from file atm_fsm.def.
This action cannot be undone.
Processed 3 vias total.
Processed 358 subcell instances total.
Processed 33 pins total.
Processed 313 nets total.
DEF read, Line 4145 (Warning): Number of nets read (46) does not match the number declared (47).
DEF read: Processed 4146 lines.
DEF Read: encountered 1 warning total.
Generating LEF output atm_fsm.lef for cell atm_fsm:
Diagnostic:  Write LEF header for cell atm_fsm
Diagnostic:  Writing LEF output for cell atm_fsm
Diagnostic:  Scale value is 0.050000
Extracting AND2X2 into AND2X2.ext:
Completed 100%
Extracting CLKBUF1 into CLKBUF1.ext:
Completed 100%
Extracting INVX8 into INVX8.ext:
Completed 100%
Extracting BUFX4 into BUFX4.ext:
Completed 100%
Extracting OAI22X1 into OAI22X1.ext:
Completed 100%
Extracting AOI21X1 into AOI21X1.ext:
Completed 100%
Extracting XNOR2X1 into XNOR2X1.ext:
Completed 100%
Extracting NOR3X1 into NOR3X1.ext:
Completed 100%
Extracting INVX2 into INVX2.ext:
Completed 100%
Extracting XOR2X1 into XOR2X1.ext:
Completed 100%
Extracting OR2X2 into OR2X2.ext:
Completed 100%
Extracting AOI22X1 into AOI22X1.ext:
Completed 100%
Extracting DFFSR into DFFSR.ext:
Completed 50%
Completed 75%
Completed 100%
Extracting FILL into FILL.ext:
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 100%
Extracting NAND3X1 into NAND3X1.ext:
Completed 100%
Extracting NOR2X1 into NOR2X1.ext:
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 100%
Extracting atm_fsm into atm_fsm.ext:
Completed 5%
Completed 11%
Completed 16%
Completed 22%
Completed 27%
Completed 33%
Completed 38%
Completed 44%
Completed 49%
Completed 55%
Completed 60%
Completed 65%
Completed 71%
Completed 76%
Completed 82%
Completed 87%
Completed 93%
Completed 98%
Completed 100%
No port connection on port 0;  need to resolve.

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project atm_fsm
Running magic 8.2.157
magic -dnull -noconsole  /home/robot/Desktop/ASIC/Project/layout/run_drc_atm_fsm.tcl

Magic 8.2 revision 157 - Compiled on Thu, 07 Nov 2019 21:14:45 +0100.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/robot/Desktop/ASIC/Project/layout/run_drc_atm_fsm.tcl" from command line.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read, Line 207 (Message): Defines site corner (ignored)
LEF read, Line 213 (Message): Defines site IO (ignored)
LEF read, Line 219 (Message): Defines site core (ignored)
Moving label "CLK" from metal1 to m2contact in cell DFFNEGX1.
Moving label "CLK" from metal1 to m2contact in cell DFFNEGX1.
Moving label "A" from metal1 to m2contact in cell XNOR2X1.
LEF read: Processed 3179 lines.
Scaled magic input cell atm_fsm geometry by factor of 2
Processing timestamp mismatches: FILL, NAND3X1, OAI21X1, NAND2X1, DFFSR, CLKBUF1, NOR2X1, BUFX2, AOI21X1, INVX8, AND2X2, NOR3X1, INVX1, OR2X2, BUFX4, INVX2, XNOR2X1, OAI22X1, AOI22X1, XOR2X1.
drc = 0



--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project atm_fsm
Running netgen
netgen ${lvs_options} -batch lvs "${rootname}.spice ${rootname}"
"${synthdir}/${rootname}.spc ${rootname}" ${setup_script} ${outfile}
-json -blackbox
Netgen 1.5.134 compiled on Wed 09 Apr 2025 11:25:43 PM PDT
Warning: netgen command 'global' use fully-qualified name '::netgen::global'
Generating JSON file result
Treating empty subcircuits as black-box cells
Reading netlist file atm_fsm.spice
Reading netlist file /home/robot/Desktop/ASIC/Project/synthesis/atm_fsm.spc
Reading setup file /usr/local/share/qflow/tech/osu035/osu035_setup.tcl
No property w found for device r
No property l found for device r
Error /usr/local/share/qflow/tech/osu035/osu035_setup.tcl:5 (ignoring), No such cell or bad file number!
Error /usr/local/share/qflow/tech/osu035/osu035_setup.tcl:6 (ignoring), No such cell or bad file number!
Warning:  There were errors reading the setup file
Comparison output logged to file comp.out
Logging to file "comp.out" enabled
Contents of circuit 1:  Circuit: 'CLKBUF1'
Circuit CLKBUF1 contains 0 device instances.
Circuit contains 0 nets, and 4 disconnected pins.
Contents of circuit 2:  Circuit: 'CLKBUF1'
Circuit CLKBUF1 contains 16 device instances.
Class: pfet                  instances:   8
Class: nfet                  instances:   8
Circuit contains 7 nets.

Circuit CLKBUF1 contains no devices.
Contents of circuit 1:  Circuit: 'BUFX4'
Circuit BUFX4 contains 0 device instances.
Circuit contains 0 nets, and 4 disconnected pins.
Contents of circuit 2:  Circuit: 'BUFX4'
Circuit BUFX4 contains 6 device instances.
Class: pfet                  instances:   3
Class: nfet                  instances:   3
Circuit contains 5 nets.

Circuit BUFX4 contains no devices.
Contents of circuit 1:  Circuit: 'BUFX2'
Circuit BUFX2 contains 0 device instances.
Circuit contains 0 nets, and 4 disconnected pins.
Contents of circuit 2:  Circuit: 'BUFX2'
Circuit BUFX2 contains 4 device instances.
Class: pfet                  instances:   2
Class: nfet                  instances:   2
Circuit contains 5 nets.

Circuit BUFX2 contains no devices.
Contents of circuit 1:  Circuit: 'INVX8'
Circuit INVX8 contains 0 device instances.
Circuit contains 0 nets, and 4 disconnected pins.
Contents of circuit 2:  Circuit: 'INVX8'
Circuit INVX8 contains 8 device instances.
Class: pfet                  instances:   4
Class: nfet                  instances:   4
Circuit contains 4 nets.

Circuit INVX8 contains no devices.
Contents of circuit 1:  Circuit: 'INVX1'
Circuit INVX1 contains 0 device instances.
Circuit contains 0 nets, and 4 disconnected pins.
Contents of circuit 2:  Circuit: 'INVX1'
Circuit INVX1 contains 2 device instances.
Class: pfet                  instances:   1
Class: nfet                  instances:   1
Circuit contains 4 nets.

Circuit INVX1 contains no devices.
Contents of circuit 1:  Circuit: 'INVX2'
Circuit INVX2 contains 0 device instances.
Circuit contains 0 nets, and 4 disconnected pins.
Contents of circuit 2:  Circuit: 'INVX2'
Circuit INVX2 contains 2 device instances.
Class: pfet                  instances:   1
Class: nfet                  instances:   1
Circuit contains 4 nets.

Circuit INVX2 contains no devices.
Contents of circuit 1:  Circuit: 'NOR2X1'
Circuit NOR2X1 contains 0 device instances.
Circuit contains 0 nets, and 5 disconnected pins.
Contents of circuit 2:  Circuit: 'NOR2X1'
Circuit NOR2X1 contains 4 device instances.
Class: pfet                  instances:   2
Class: nfet                  instances:   2


--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project atm_fsm
Running magic 8.2.157
magic -dnull -noconsole  /home/robot/Desktop/ASIC/Project/layout/generate_gds_atm_fsm.tcl

Magic 8.2 revision 157 - Compiled on Thu, 07 Nov 2019 21:14:45 +0100.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/robot/Desktop/ASIC/Project/layout/generate_gds_atm_fsm.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Warning: Calma reading is not undoable!  I hope that's OK.
Library written using GDS-II Release 3.0
Library name: iit_stdcells
Reading "FILL".
Moving label "vdd" from space to metal1 in cell FILL.
Moving label "gnd" from space to metal1 in cell FILL.
Reading "AND2X1".
Moving label "Y" from space to metal1 in cell AND2X1.
Moving label "B" from space to metal1 in cell AND2X1.
Moving label "vdd" from space to metal1 in cell AND2X1.
Moving label "gnd" from space to metal1 in cell AND2X1.
Moving label "A" from space to metal1 in cell AND2X1.
Reading "AND2X2".
Moving label "vdd" from space to metal1 in cell AND2X2.
Moving label "gnd" from space to metal1 in cell AND2X2.
Moving label "A" from space to metal1 in cell AND2X2.
Moving label "B" from space to metal1 in cell AND2X2.
Moving label "Y" from space to metal1 in cell AND2X2.
Reading "AOI21X1".
Moving label "gnd" from space to metal1 in cell AOI21X1.
Moving label "vdd" from space to metal1 in cell AOI21X1.
Moving label "A" from space to metal1 in cell AOI21X1.
Moving label "B" from space to metal1 in cell AOI21X1.
Moving label "Y" from space to metal1 in cell AOI21X1.
Moving label "C" from space to metal1 in cell AOI21X1.
Reading "AOI22X1".
Moving label "gnd" from space to metal1 in cell AOI22X1.
Moving label "vdd" from space to metal1 in cell AOI22X1.
Moving label "C" from space to metal1 in cell AOI22X1.
Moving label "D" from space to metal1 in cell AOI22X1.
Moving label "Y" from space to metal1 in cell AOI22X1.
Moving label "A" from space to metal1 in cell AOI22X1.
Moving label "B" from space to metal1 in cell AOI22X1.
Reading "BUFX2".
Moving label "vdd" from space to metal1 in cell BUFX2.
Moving label "gnd" from space to metal1 in cell BUFX2.
Moving label "A" from space to metal1 in cell BUFX2.
Moving label "Y" from space to metal1 in cell BUFX2.
Reading "BUFX4".
Moving label "vdd" from space to metal1 in cell BUFX4.
Moving label "gnd" from space to metal1 in cell BUFX4.
Moving label "A" from space to metal1 in cell BUFX4.
Moving label "Y" from space to metal1 in cell BUFX4.
Reading "DFFNEGX1".
Moving label "CLK" from space to metal1 in cell DFFNEGX1.
Moving label "vdd" from space to metal1 in cell DFFNEGX1.
Moving label "D" from space to metal1 in cell DFFNEGX1.
Moving label "gnd" from space to metal1 in cell DFFNEGX1.
Moving label "Q" from space to metal1 in cell DFFNEGX1.
Reading "NOR3X1".
Moving label "vdd" from space to metal1 in cell NOR3X1.
Moving label "gnd" from space to metal1 in cell NOR3X1.
Moving label "B" from space to metal1 in cell NOR3X1.
Moving label "C" from space to metal1 in cell NOR3X1.
Moving label "A" from space to metal1 in cell NOR3X1.
Moving label "Y" from space to metal1 in cell NOR3X1.
Reading "DFFPOSX1".
Moving label "vdd" from space to metal1 in cell DFFPOSX1.
Moving label "D" from space to metal1 in cell DFFPOSX1.
Moving label "gnd" from space to metal1 in cell DFFPOSX1.
Moving label "Q" from space to metal1 in cell DFFPOSX1.
Moving label "CLK" from space to metal1 in cell DFFPOSX1.
Reading "FAX1".
Moving label "gnd" from space to metal1 in cell FAX1.
Moving label "vdd" from space to metal1 in cell FAX1.
Moving label "A" from space to metal1 in cell FAX1.
Moving label "B" from space to metal1 in cell FAX1.
Moving label "C" from space to metal1 in cell FAX1.
Moving label "YC" from space to metal1 in cell FAX1.
Moving label "YS" from space to metal1 in cell FAX1.
Reading "HAX1".
Moving label "vdd" from space to metal1 in cell HAX1.
Moving label "gnd" from space to metal1 in cell HAX1.
Moving label "YC" from space to metal1 in cell HAX1.
Moving label "A" from space to metal1 in cell HAX1.
Moving label "B" from space to metal1 in cell HAX1.
Moving label "YS" from space to metal1 in cell HAX1.
Reading "INVX1".
Moving label "A" from space to metal1 in cell INVX1.
Moving label "Y" from space to metal1 in cell INVX1.
Moving label "vdd" from space to metal1 in cell INVX1.
Moving label "gnd" from space to metal1 in cell INVX1.
Reading "INVX2".
Moving label "vdd" from space to metal1 in cell INVX2.
Moving label "gnd" from space to metal1 in cell INVX2.
Moving label "Y" from space to metal1 in cell INVX2.
Moving label "A" from space to metal1 in cell INVX2.
Reading "INVX4".
Moving label "vdd" from space to metal1 in cell INVX4.
Moving label "gnd" from space to metal1 in cell INVX4.
Moving label "Y" from space to metal1 in cell INVX4.
Moving label "A" from space to metal1 in cell INVX4.
Reading "INVX8".
Moving label "vdd" from space to metal1 in cell INVX8.
Moving label "gnd" from space to metal1 in cell INVX8.
Moving label "A" from space to metal1 in cell INVX8.
Moving label "Y" from space to metal1 in cell INVX8.
Reading "NAND2X1".
Moving label "vdd" from space to metal1 in cell NAND2X1.
Moving label "Y" from space to metal1 in cell NAND2X1.
Moving label "gnd" from space to metal1 in cell NAND2X1.
Moving label "A" from space to metal1 in cell NAND2X1.
Moving label "B" from space to metal1 in cell NAND2X1.
Reading "NAND3X1".
Moving label "B" from space to metal1 in cell NAND3X1.
Moving label "vdd" from space to metal1 in cell NAND3X1.
Moving label "gnd" from space to metal1 in cell NAND3X1.
Moving label "A" from space to metal1 in cell NAND3X1.
Moving label "C" from space to metal1 in cell NAND3X1.
Moving label "Y" from space to metal1 in cell NAND3X1.
Reading "NOR2X1".
Moving label "vdd" from space to metal1 in cell NOR2X1.
Moving label "B" from space to metal1 in cell NOR2X1.
Moving label "gnd" from space to metal1 in cell NOR2X1.
Moving label "Y" from space to metal1 in cell NOR2X1.
Moving label "A" from space to metal1 in cell NOR2X1.
Reading "OAI21X1".
Moving label "gnd" from space to metal1 in cell OAI21X1.
Moving label "vdd" from space to metal1 in cell OAI21X1.
Moving label "A" from space to metal1 in cell OAI21X1.
Moving label "B" from space to metal1 in cell OAI21X1.
Moving label "Y" from space to metal1 in cell OAI21X1.

